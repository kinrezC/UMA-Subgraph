// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class CreatedTokenizedDerivative extends EthereumEvent {
  get params(): CreatedTokenizedDerivative__Params {
    return new CreatedTokenizedDerivative__Params(this);
  }
}

export class CreatedTokenizedDerivative__Params {
  _event: CreatedTokenizedDerivative;

  constructor(event: CreatedTokenizedDerivative) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TokenizedDerivativeCreator__createTokenizedDerivativeInputParamsStruct extends EthereumTuple {
  get priceFeedAddress(): Address {
    return this[0].toAddress();
  }

  get defaultPenalty(): BigInt {
    return this[1].toBigInt();
  }

  get supportedMove(): BigInt {
    return this[2].toBigInt();
  }

  get product(): Bytes {
    return this[3].toBytes();
  }

  get fixedYearlyFee(): BigInt {
    return this[4].toBigInt();
  }

  get disputeDeposit(): BigInt {
    return this[5].toBigInt();
  }

  get returnCalculator(): Address {
    return this[6].toAddress();
  }

  get startingTokenPrice(): BigInt {
    return this[7].toBigInt();
  }

  get expiry(): BigInt {
    return this[8].toBigInt();
  }

  get marginCurrency(): Address {
    return this[9].toAddress();
  }

  get withdrawLimit(): BigInt {
    return this[10].toBigInt();
  }

  get returnType(): i32 {
    return this[11].toI32();
  }

  get startingUnderlyingPrice(): BigInt {
    return this[12].toBigInt();
  }

  get name(): string {
    return this[13].toString();
  }

  get symbol(): string {
    return this[14].toString();
  }
}

export class TokenizedDerivativeCreator extends SmartContract {
  static bind(address: Address): TokenizedDerivativeCreator {
    return new TokenizedDerivativeCreator(
      "TokenizedDerivativeCreator",
      address
    );
  }

  getCurrentTime(): BigInt {
    let result = super.call("getCurrentTime", []);

    return result[0].toBigInt();
  }

  try_getCurrentTime(): CallResult<BigInt> {
    let result = super.tryCall("getCurrentTime", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  isTest(): boolean {
    let result = super.call("isTest", []);

    return result[0].toBoolean();
  }

  try_isTest(): CallResult<boolean> {
    let result = super.tryCall("isTest", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  marginCurrencyWhitelist(): Address {
    let result = super.call("marginCurrencyWhitelist", []);

    return result[0].toAddress();
  }

  try_marginCurrencyWhitelist(): CallResult<Address> {
    let result = super.tryCall("marginCurrencyWhitelist", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  returnCalculatorWhitelist(): Address {
    let result = super.call("returnCalculatorWhitelist", []);

    return result[0].toAddress();
  }

  try_returnCalculatorWhitelist(): CallResult<Address> {
    let result = super.tryCall("returnCalculatorWhitelist", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  createTokenizedDerivative(
    params: TokenizedDerivativeCreator__createTokenizedDerivativeInputParamsStruct
  ): Address {
    let result = super.call("createTokenizedDerivative", [
      EthereumValue.fromTuple(params)
    ]);

    return result[0].toAddress();
  }

  try_createTokenizedDerivative(
    params: TokenizedDerivativeCreator__createTokenizedDerivativeInputParamsStruct
  ): CallResult<Address> {
    let result = super.tryCall("createTokenizedDerivative", [
      EthereumValue.fromTuple(params)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _finderAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _returnCalculatorWhitelist(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _marginCurrencyWhitelist(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _isTest(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SetCurrentTimeCall extends EthereumCall {
  get inputs(): SetCurrentTimeCall__Inputs {
    return new SetCurrentTimeCall__Inputs(this);
  }

  get outputs(): SetCurrentTimeCall__Outputs {
    return new SetCurrentTimeCall__Outputs(this);
  }
}

export class SetCurrentTimeCall__Inputs {
  _call: SetCurrentTimeCall;

  constructor(call: SetCurrentTimeCall) {
    this._call = call;
  }

  get _time(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCurrentTimeCall__Outputs {
  _call: SetCurrentTimeCall;

  constructor(call: SetCurrentTimeCall) {
    this._call = call;
  }
}

export class CreateTokenizedDerivativeCall extends EthereumCall {
  get inputs(): CreateTokenizedDerivativeCall__Inputs {
    return new CreateTokenizedDerivativeCall__Inputs(this);
  }

  get outputs(): CreateTokenizedDerivativeCall__Outputs {
    return new CreateTokenizedDerivativeCall__Outputs(this);
  }
}

export class CreateTokenizedDerivativeCall__Inputs {
  _call: CreateTokenizedDerivativeCall;

  constructor(call: CreateTokenizedDerivativeCall) {
    this._call = call;
  }

  get params(): CreateTokenizedDerivativeCallParamsStruct {
    return this._call.inputValues[0].value.toTuple() as CreateTokenizedDerivativeCallParamsStruct;
  }
}

export class CreateTokenizedDerivativeCall__Outputs {
  _call: CreateTokenizedDerivativeCall;

  constructor(call: CreateTokenizedDerivativeCall) {
    this._call = call;
  }

  get derivativeAddress(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateTokenizedDerivativeCallParamsStruct extends EthereumTuple {
  get priceFeedAddress(): Address {
    return this[0].toAddress();
  }

  get defaultPenalty(): BigInt {
    return this[1].toBigInt();
  }

  get supportedMove(): BigInt {
    return this[2].toBigInt();
  }

  get product(): Bytes {
    return this[3].toBytes();
  }

  get fixedYearlyFee(): BigInt {
    return this[4].toBigInt();
  }

  get disputeDeposit(): BigInt {
    return this[5].toBigInt();
  }

  get returnCalculator(): Address {
    return this[6].toAddress();
  }

  get startingTokenPrice(): BigInt {
    return this[7].toBigInt();
  }

  get expiry(): BigInt {
    return this[8].toBigInt();
  }

  get marginCurrency(): Address {
    return this[9].toAddress();
  }

  get withdrawLimit(): BigInt {
    return this[10].toBigInt();
  }

  get returnType(): i32 {
    return this[11].toI32();
  }

  get startingUnderlyingPrice(): BigInt {
    return this[12].toBigInt();
  }

  get name(): string {
    return this[13].toString();
  }

  get symbol(): string {
    return this[14].toString();
  }
}
